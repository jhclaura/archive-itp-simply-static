<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Coding for Emotional Impact &#8211; ITP Days</title>
	<atom:link href="/category/spring-2014/coding-for-emotional-impact/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Very cool days</description>
	<lastBuildDate>Mon, 28 Apr 2014 03:17:12 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.1</generator>

<image>
	<url>/wp-content/uploads/2015/09/cropped-hat-32x32.jpg</url>
	<title>Coding for Emotional Impact &#8211; ITP Days</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>{Rabbit_Hole} update!</title>
		<link>/2014/04/27/rabbit_hole-update-half-way-to-go/</link>
					<comments>/2014/04/27/rabbit_hole-update-half-way-to-go/#respond</comments>
		
		<dc:creator><![CDATA[jhclaura]]></dc:creator>
		<pubDate>Mon, 28 Apr 2014 03:17:12 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Coding for Emotional Impact]]></category>
		<category><![CDATA[Spring 2014]]></category>
		<category><![CDATA[final]]></category>
		<category><![CDATA[RabbitHole]]></category>
		<category><![CDATA[three.js]]></category>
		<guid isPermaLink="false">http://www.jhclaura.com/?p=1436</guid>

					<description><![CDATA[]]></description>
										<content:encoded><![CDATA[<p><iframe loading="lazy" src="https://docs.google.com/presentation/d/1UP_n7l4r-ZdcueNbdV9g5uRBcsBFXeobt2OsJm9b3_Q/embed?start=false&#038;loop=true&#038;delayms=5000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe></p>
]]></content:encoded>
					
					<wfw:commentRss>/2014/04/27/rabbit_hole-update-half-way-to-go/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>{Rabbit_Hole}</title>
		<link>/2014/04/13/composition-rabbit_hole/</link>
					<comments>/2014/04/13/composition-rabbit_hole/#respond</comments>
		
		<dc:creator><![CDATA[jhclaura]]></dc:creator>
		<pubDate>Mon, 14 Apr 2014 02:41:32 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Coding for Emotional Impact]]></category>
		<category><![CDATA[brain-squeezing]]></category>
		<category><![CDATA[design]]></category>
		<category><![CDATA[fantasy]]></category>
		<category><![CDATA[final]]></category>
		<category><![CDATA[game]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[life]]></category>
		<category><![CDATA[Maya]]></category>
		<category><![CDATA[project]]></category>
		<category><![CDATA[three.js]]></category>
		<category><![CDATA[web]]></category>
		<guid isPermaLink="false">http://www.jhclaura.com/?p=1409</guid>

					<description><![CDATA[{currently works with Chrome and Firefox browser} For the composition assignment the final of Coding for Emotional Impact class, I want to create something with multiple layers and is self-explained. Inspired by the description of computer vision is a rabbit hole from Andy(because I&#8217;m learning Three.js by myself recently), I wanted to make a game about &#8220;Rabbit [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><span style="font-size: 14pt;">{currently works with <span style="color: #000000;">Chrome</span> and Firefox browser}</span></p>
<p>For <del>the composition assignment</del> the final of <em>Coding for Emotional Impact</em> class, I want to create something with multiple layers and is self-explained. Inspired by the description of computer vision is a rabbit hole from <a href="http://andysigler.com/" target="_blank">Andy</a>(because I&#8217;m learning <a href="http://threejs.org/" target="_blank">Three.js</a> by myself recently), I wanted to make a game about &#8220;Rabbit Hole&#8221;, and my biggest assumption is that everyone is sort of down the rabbit hole.</p>
<p>ps. It&#8217;s not really a fun game to play. Still confusing should it be fun to play or just an emotion-building nowhere&#8230;</p>
<div style="color: #222222;">&#8211; Title</div>
<div style="color: #222222;"><strong><span style="font-size: 12pt;"><span style="font-family: 'andale mono', times;">Rabbit Hole</span></span></strong></div>
<div style="color: #222222;"></div>
<div style="color: #222222;"></div>
<div style="color: #222222;">&#8211; Environment</div>
<div style="color: #222222;"><a href="http://www.jhclaura.com/wp-content/uploads/2014/04/environment.png"><img loading="lazy" class="alignnone wp-image-1426 " src="http://www.jhclaura.com/wp-content/uploads/2014/04/environment.png" alt="environment" width="382" height="494" /></a>     <a href="http://www.jhclaura.com/wp-content/uploads/2014/04/environment2.png"><img loading="lazy" class="alignnone wp-image-1427 " src="http://www.jhclaura.com/wp-content/uploads/2014/04/environment2.png" alt="environment2" width="383" height="496" /></a></div>
<div style="color: #222222;"></div>
<div style="color: #222222;">&#8211; Audience</div>
<div style="color: #222222;"><span style="font-family: 'andale mono', times; font-size: 12pt;">Whoever also down the rabbit hole or wonder how it feel down there.</span></div>
<div style="color: #222222;"></div>
<div style="color: #222222;"><span style="font-family: 'andale mono', times; font-size: 12pt;"> </span></div>
<div style="color: #222222;">&#8211; Narrative arc</div>
<div style="color: #222222;"><span style="font-family: 'Book Antiqua', Palatino; font-size: medium;"><span style="font-family: 'Andale Mono', Times;"><strong>Rabbit Hole</strong>&#8211;</span></span><span style="font-family: 'Book Antiqua', Palatino; font-size: medium; color: #888888;"><em>Metaphor for the conceptual path which is thought to lead to the true nature of reality. Infinitesimally deep and complex, venturing too far down is probably not that great of an idea.</em></span></div>
<p dir="ltr"><span style="font-family: 'Andale Mono', Times; font-size: medium;"><strong>Literary Nonsense-</strong></span> <span style="font-size: medium; color: #808080;"><em><span style="line-height: 1.5em; font-family: 'Book Antiqua', Palatino;">has no system of logic, although it may imply the existence of an inscrutable one, just beyond our grasp.</span></em></span></p>
<p dir="ltr">And below are three snapshots of what I&#8217;ve built so far. I made my own models in Maya and drew textures in Photoshop. <span style="color: #999999;"><del>Can&#8217;t view online because of some web-related issue I can&#8217;t solve to load the music</del></span>(SOLVED_by hard coding the url of music file path). But have no ideas how to do the transition from scene to scene&#8230;</p>
<p dir="ltr">SCENE_ZERO: <a href="http://www.rabbithole.link/" target="_blank">http://www.rabbithole.link/</a></p>
<p dir="ltr"><a href="http://www.jhclaura.com/wp-content/uploads/2014/04/open.png"><img loading="lazy" class="alignnone size-full wp-image-1477" src="http://www.jhclaura.com/wp-content/uploads/2014/04/open.png" alt="open" width="800" height="403" /></a></p>
<p dir="ltr">SCENE_ONE: <a href="http://www.rabbithole.link/index_D.html" target="_blank">http://www.rabbithole.link/index_D.html</a></p>
<p dir="ltr"><a href="http://www.jhclaura.com/wp-content/uploads/2014/04/Screen-Shot-2014-04-13-at-10.26.14-PM.png"><img loading="lazy" class="alignnone size-full wp-image-1411" src="http://www.jhclaura.com/wp-content/uploads/2014/04/Screen-Shot-2014-04-13-at-10.26.14-PM.png" alt="Screen Shot 2014-04-13 at 10.26.14 PM" width="800" height="436" /></a></p>
<p dir="ltr">SCENCE_TWO: <a href="http://www.rabbithole.link/index_G.html" target="_blank">http://www.rabbithole.link/index_G.html</a></p>
<p dir="ltr"><a href="http://www.jhclaura.com/wp-content/uploads/2014/04/Screen-Shot-2014-04-13-at-10.27.30-PM.png"><img loading="lazy" class="alignnone size-full wp-image-1412" src="http://www.jhclaura.com/wp-content/uploads/2014/04/Screen-Shot-2014-04-13-at-10.27.30-PM.png" alt="Screen Shot 2014-04-13 at 10.27.30 PM" width="800" height="436" /></a></p>
<p dir="ltr">SCENE_THREE: <a href="http://www.rabbithole.link/index_S.html" target="_blank">http://www.rabbithole.link/index_S.html</a></p>
<p dir="ltr"><a href="http://www.jhclaura.com/wp-content/uploads/2014/04/Screen-Shot-2014-04-20-at-6.44.00-PM.png"><img loading="lazy" class="alignnone size-full wp-image-1425" src="http://www.jhclaura.com/wp-content/uploads/2014/04/Screen-Shot-2014-04-20-at-6.44.00-PM.png" alt="Screen Shot 2014-04-20 at 6.44.00 PM" width="800" height="397" /></a></p>
<p dir="ltr">SCENE_FOUR: <a href="http://www.rabbithole.link/index_M.html" target="_blank">http://www.rabbithole.link/index_M.html</a></p>
<p dir="ltr"><a href="http://www.jhclaura.com/wp-content/uploads/2014/04/maze.png"><img loading="lazy" class="alignnone size-full wp-image-1463" src="http://www.jhclaura.com/wp-content/uploads/2014/04/maze.png" alt="maze" width="800" height="401" /></a></p>
<p dir="ltr">SCENE_FIVE: <a href="http://www.rabbithole.link/index_T.html" target="_blank">http://www.rabbithole.link/index_T.html</a></p>
<p dir="ltr"><a href="http://www.jhclaura.com/wp-content/uploads/2014/04/TV.png"><img loading="lazy" class="alignnone size-full wp-image-1467" src="http://www.jhclaura.com/wp-content/uploads/2014/04/TV.png" alt="TV" width="800" height="295" /></a></p>
<p dir="ltr">SCENE_SIX: <a href="http://www.rabbithole.link/index_F.html" target="_blank">http://www.rabbithole.link/index_F.html</a></p>
<p dir="ltr"><a href="http://www.jhclaura.com/wp-content/uploads/2014/04/jump.png"><img loading="lazy" class="alignnone size-full wp-image-1472" src="http://www.jhclaura.com/wp-content/uploads/2014/04/jump.png" alt="jump" width="800" height="397" /></a></p>
<p dir="ltr">SCENE_SEVEN: <a href="http://www.rabbithole.link/index_V.html" target="_blank">http://www.rabbithole.link/index_V.html</a></p>
<p dir="ltr"><a href="http://www.jhclaura.com/wp-content/uploads/2014/04/voice.png"><img loading="lazy" class="alignnone size-full wp-image-1469" src="http://www.jhclaura.com/wp-content/uploads/2014/04/voice.png" alt="voice" width="800" height="309" /></a></p>
<p dir="ltr">SCENE_EIGHT: <a href="http://www.rabbithole.link/index_E.html" target="_blank">http://www.rabbithole.link/index_E.html</a></p>
<p dir="ltr"><a href="http://www.jhclaura.com/wp-content/uploads/2014/04/Elevator.png"><img loading="lazy" class="alignnone size-full wp-image-1474" src="http://www.jhclaura.com/wp-content/uploads/2014/04/Elevator.png" alt="Elevator" width="800" height="399" /></a></p>
<p dir="ltr">( Three.js + web stuff ) == super deep rabbit hole.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2014/04/13/composition-rabbit_hole/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>study note_{Three.js}</title>
		<link>/2014/03/31/study-note_three-js/</link>
					<comments>/2014/03/31/study-note_three-js/#respond</comments>
		
		<dc:creator><![CDATA[jhclaura]]></dc:creator>
		<pubDate>Mon, 31 Mar 2014 13:03:25 +0000</pubDate>
				<category><![CDATA[Coding for Emotional Impact]]></category>
		<category><![CDATA[Spring 2014]]></category>
		<category><![CDATA[3D]]></category>
		<category><![CDATA[animation]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[three.js]]></category>
		<guid isPermaLink="false">http://www.jhclaura.com/?p=1382</guid>

					<description><![CDATA[3D in Web journey starts! Trying to convert last week&#8217;s sketch from Processing into Three.js. But can&#8217;t finished it by Monday for the class, still in progress&#8230; Here&#8217;s what I got so far(WARNING: ROUGH), and below are the notes on translating Processing into JavaScript. Will organized it once I finish the work. Stay tuned! Experience I learned from [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>3D in Web journey starts! Trying to convert <a title="Timing and Pacing" href="http://www.jhclaura.com/timing-and-pacing/" target="_blank">last week&#8217;s sketch</a> from Processing into Three.js. But can&#8217;t finished it by Monday for the class, still in progress&#8230; <strong><span style="color: #ff6600;"><a href="http://jhclaura.com/meshup/noise3d/index.html" target="_blank"><span style="color: #ff6600;">Here&#8217;s what I got so far</span></a></span></strong>(<span style="color: #ff0000;"><strong>WARNING: ROUGH</strong></span>), and below are the notes on translating Processing into JavaScript. Will organized it once I finish the work. Stay tuned!</p>
<p><span style="font-size: medium;"><strong><span style="font-family: 'Andale Mono', Times;">Experience I learned from banging my head against bloody wall</span></strong></span></p>
<ol>
<li>put your codes in function and then execute them by calling the function
<ul>
<li>tried to rotate my goddamn tetrahedron without doing this and had been failing for nearly 2 hours, just kept failing and failing and failing&#8230;.</li>
</ul>
</li>
<li>OOP
<ul>
<li>links
<ul>
<li>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript</li>
<li>http://stackoverflow.com/questions/572897/how-does-javascript-prototype-work</li>
<li>https://github.com/shiffman/The-Nature-of-Code-Examples-p5.js/issues/8</li>
<li>http://javascriptissexy.com/javascript-prototype-in-plain-detailed-language/</li>
<li>https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype</li>
<li>http://www.objectplayground.com/</li>
</ul>
</li>
</ul>
</li>
<li>color
<ul>
<li>if using HSL, material.color.setHSL( h, s, l); &#8211;&gt; *careful* can&#8217;t set s, l both to 1, it&#8217;d be white even though h &lt; 1</li>
</ul>
</li>
<li>Web Audio API
<ul>
<li>http://srchea.com/experimenting-with-web-audio-api-three-js-webgl</li>
</ul>
</li>
<li>Clickable!!
<ul>
<li>http://soledadpenades.com/articles/three-js-tutorials/object-picking/</li>
<li>http://threejs.org/examples/canvas_interactive_cubes.html</li>
<li>http://stackoverflow.com/questions/11036106/three-js-projector-and-ray-objects</li>
<li></li>
</ul>
</li>
</ol>
]]></content:encoded>
					
					<wfw:commentRss>/2014/03/31/study-note_three-js/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Timing and Pacing</title>
		<link>/2014/03/22/timing-and-pacing/</link>
					<comments>/2014/03/22/timing-and-pacing/#comments</comments>
		
		<dc:creator><![CDATA[jhclaura]]></dc:creator>
		<pubDate>Sun, 23 Mar 2014 00:02:40 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Coding for Emotional Impact]]></category>
		<category><![CDATA[Spring 2014]]></category>
		<category><![CDATA[analyze]]></category>
		<category><![CDATA[music]]></category>
		<category><![CDATA[observation]]></category>
		<category><![CDATA[processing]]></category>
		<guid isPermaLink="false">http://www.jhclaura.com/?p=1338</guid>

					<description><![CDATA[For this week&#8217;s subject Timing and Pacing, I chose &#8220;No Safe-House&#8221; in the soundtrack of The Grand Budapest Hotel to decode. &#160; effect I intend to achieve &#8211;&#62; emotion accumulation, cheerful and narrative. notes library I used for camera in 3D &#8211;&#62;  http://mrfeinberg.com/peasycam/#about using PShape to store the tetrahedron I made and set their movements with [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>For this week&#8217;s subject Timing and Pacing, I chose &#8220;<a href="https://play.spotify.com/track/7bPZmJll7J8afrEfjNZ26p?play=true&amp;utm_source=open.spotify.com&amp;utm_medium=open" target="_blank"><strong>No Safe-House</strong></a>&#8221; in the soundtrack of The Grand Budapest Hotel to decode.</p>
<p><a href="http://www.jhclaura.com/wp-content/uploads/2014/03/timing.png"><img loading="lazy" class="alignnone size-full wp-image-1339" alt="timing" src="http://www.jhclaura.com/wp-content/uploads/2014/03/timing.png" width="1000" height="489" /></a></p>
<p>&nbsp;</p>
<p><iframe loading="lazy" src="//player.vimeo.com/video/89797686?byline=0&amp;color=c9ff23" height="637" width="800" allowfullscreen="" frameborder="0"></iframe></p>
<p><span style="font-family: 'Andale Mono', Times; font-size: medium;"><em><strong>effect</strong></em></span> I intend to achieve</p>
<p>&#8211;&gt; emotion accumulation, cheerful and narrative.</p>
<p><span style="font-size: medium;"><span style="font-family: 'Andale Mono', Times;"><strong><em>notes</em></strong></span></span></p>
<ul>
<li>library I used for camera in 3D &#8211;&gt;  http://mrfeinberg.com/peasycam/#about</li>
<li>using PShape to store the tetrahedron I made and set their movements with trigonometry functions, noise, hsl, and <span style="color: #00ccff; font-size: large;"><strong><em><span style="font-family: 'Book Antiqua', Palatino;">hard-coding</span></em></strong></span> frameCount!!!(see how long and tedious my codes are :P)</li>
<li><strong>issues</strong> to work on, since I used frameCount, it&#8217;s different all the time, depending how fast my computer run. need to use <span style="color: #ff6666;"><strong><span style="font-family: 'Courier New', Courier; font-size: medium;">millis()</span></strong></span> next time!</li>
<li>next step will be using library Minim to generate the patterns directly from the analysis of sound file.</li>
</ul>
<p><span style="font-family: 'Andale Mono', Times; font-size: medium;"><strong><em>codes</em></strong> </span></p>
<p><span id="more-1338"></span></p>
<pre class="brush: java; gutter: true">import peasy.test.*;
import peasy.org.apache.commons.math.*;
import peasy.*;
import peasy.org.apache.commons.math.geometry.*;
import ddf.minim.*;

Minim minim;
AudioPlayer player;
PeasyCam cam;

float spin = 0.0;

SinWave sinW1;
SinWave sinW2;  //time=0
CosWave cosW1;
CosWave cosW2;  //time=0;
TanWave tanW1;
TanWave tanW2;  //time=0;

//SinWave sw1;
//SinWave sw2;
//first circle
ArrayList&lt;SinWave&gt; sw1;
ArrayList&lt;SinWave&gt; sw2;
ArrayList&lt;TanWave&gt; tw;
ArrayList&lt;CosWave&gt; cw1;

//second circle
ArrayList&lt;SinWave&gt; sw1b;
ArrayList&lt;SinWave&gt; sw2b;
ArrayList&lt;TanWave&gt; twb;
ArrayList&lt;CosWave&gt; cw1b;

//3rd circle
ArrayList&lt;SinWave&gt; sw1c;
ArrayList&lt;SinWave&gt; sw2c;
ArrayList&lt;TanWave&gt; twc;
ArrayList&lt;CosWave&gt; cw1c;

float frequency = 0.01;
float time1 = PI/2;
float time2 = 0;
float amplitude = 5;
float offset = 0;
float increaseAmp = 0.01;
float increaseBri = 0.01;
float increaseBri2 = 0.01;
float increaseTime = 0.01;
float radiusCircle = 0.0;

float ang;
float posX;
float posY;
float posZ;

float posX2;
float posY2;
float posZ2;

float posCX;
float posCY;

ArrayList&lt;Tetrahedron&gt; triS;
ArrayList&lt;Tetrahedron&gt; triCircleS;
ArrayList&lt;Tetrahedron&gt; triCircle2S;
ArrayList&lt;Tetrahedron&gt; triCircle3S;

float noiseVal;
float noiseScale=0.02;

int octaves;
float falloff;
float time;

boolean increase = true;

int circleNum = 60;
float size;

//Camera
float xmag, ymag = 0;
float newXmag, newYmag = 0; 
float averagePosX = 0;

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
//////////////////////  SET_UP  ////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
void setup() {
  noCursor();
  noFill();
  //stroke(255);
  size(1000, 800, P3D);
  colorMode(HSB,100);

  //Camera-------------------------------------------------
  //-------------------------------------------------------
  cam = new PeasyCam(this, 0, 0, 0, 1000);
//  cam.setActive(false);
//  cam.setYawRotationMode();

  //audio
  minim = new Minim(this);
  player = minim.loadFile(&quot;No Safe-House.mp3&quot;);
  player.play();

  sinW1 = new SinWave(time1, frequency, amplitude, offset);
  sinW2 = new SinWave(time2, frequency, amplitude, offset);
  cosW1 = new CosWave(time1, frequency, amplitude, offset);
  cosW2 = new CosWave(time2, frequency, amplitude, offset);
  tanW1 = new TanWave(time1, frequency, amplitude, offset);
  tanW2 = new TanWave(time2, frequency, amplitude, offset);

  triS = new ArrayList&lt;Tetrahedron&gt;();
  triCircleS = new ArrayList&lt;Tetrahedron&gt;();
  triCircle2S = new ArrayList&lt;Tetrahedron&gt;();
  triCircle3S = new ArrayList&lt;Tetrahedron&gt;();

  sw1 = new ArrayList&lt;SinWave&gt;();
  sw2 = new ArrayList&lt;SinWave&gt;();
  tw = new ArrayList&lt;TanWave&gt;();
  cw1 = new ArrayList&lt;CosWave&gt;();

  sw1b = new ArrayList&lt;SinWave&gt;();
  sw2b = new ArrayList&lt;SinWave&gt;();
  twb = new ArrayList&lt;TanWave&gt;();
  cw1b = new ArrayList&lt;CosWave&gt;();

  sw1c = new ArrayList&lt;SinWave&gt;();
  sw2c = new ArrayList&lt;SinWave&gt;();
  twc = new ArrayList&lt;TanWave&gt;();
  cw1c = new ArrayList&lt;CosWave&gt;();

  //first circle
  for(int i=0; i&lt;circleNum; i++){
    Tetrahedron t = new Tetrahedron(color((i)*(100/circleNum), 100, 100));

    SinWave x = new SinWave(radians(360/circleNum*i), frequency, amplitude, offset);
    sw1.add(x);
    SinWave y = new SinWave(PI/2+radians(360/circleNum*i), frequency, amplitude, offset);
    sw2.add(y);
    TanWave tt = new TanWave(radians(360/(circleNum*2)*i), frequency, amplitude, offset);
    tw.add(tt);
    CosWave v = new CosWave(radians(180/2*i), 0.1, 0.2, offset);
    cw1.add(v);

    t.update(x.run()*100, v.run()*50, y.run()*100, tt.run()*0.05);
    triCircleS.add(t);
  }

  //spread circle
  int amount = 30;
  for(int j=0; j&lt;amount; j++){
    Tetrahedron tet = new Tetrahedron();
    Tetrahedron t = new Tetrahedron();

    SinWave x2 = new SinWave(radians(360/amount*j), frequency, amplitude, offset);
    sw1b.add(x2);
    SinWave y2 = new SinWave(PI/2+radians(360/amount*j), frequency, amplitude, offset);
    sw2b.add(y2);
    TanWave tt2 = new TanWave(radians(360/(amount*2)*j), frequency, amplitude, offset);
    twb.add(tt2);
    CosWave v2 = new CosWave(radians(180/2*j), 0.1, 0.2, offset);
    cw1b.add(v2);

    SinWave x3 = new SinWave(radians(360/amount*j), frequency, amplitude, offset);
    sw1c.add(x3);
    SinWave y3 = new SinWave(PI/2+radians(360/amount*j), frequency, amplitude, offset);
    sw2c.add(y3);
    TanWave tt3 = new TanWave(radians(360/(amount*2)*j), frequency, amplitude, offset);
    twc.add(tt3);
    CosWave v3 = new CosWave(PI/2+radians(180/2*j), frequency, amplitude, 0);
    cw1c.add(v3);

    tet.update(x2.run()*100, v2.run()*50, y2.run()*100, tt2.run()*0.05);

    t.update(x3.run()*100, v3.run()*50, v3.run()*100, tt3.run()*0.05);

    triCircle2S.add(tet);
    triCircle3S.add(t);
  }

  size=2;

}

////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
///////////////////////  DRAW  /////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
void draw() {
  rotateX(-.2);
  //rotateY(-.2);

  background(255/23);
  //lights();
  noFill();
  //stroke(255);
  //strokeWeight(3);

  //Camera-------------------------------------------------
  //-------------------------------------------------------
//  if(frameCount &lt; 60*20)
//    cam.setYawRotationMode();

  //rotateX(-PI/2);
  noiseDetail(octaves, falloff);

  posX = sinW1.run();
  posY = cosW2.run();
  posZ = cosW1.run();

  posX2 = cosW1.run();
  posY2 = sinW2.run();
  posZ2 = cosW2.run();

  spin = 0.05*tanW1.run();

  //inner circle---------------------------------------------------
  //0:00~0:32------------------------------------------------------
  if(triCircleS.size()&gt;0){    
    //circle
    for(int i=0; i&lt;triCircleS.size(); i++){
      Tetrahedron t = triCircleS.get(i);
      SinWave x = sw1.get(i);
      SinWave y = sw2.get(i);
      TanWave tt = tw.get(i);
      CosWave v = cw1.get(i);

      t.update(x.run()*(70+radiusCircle), v.run()*50, y.run()*(70+radiusCircle), tt.run()*0.05);      

      if(frameCount &gt; 3500) {
       if(frameCount &lt; 3720)
         radiusCircle += 0.002;
       else if(frameCount &lt; 3720+60*2)
         radiusCircle -= 0.002;
      }

      //sizing---------------------------------------------------------
      //0:00~0:32------------------------------------------------------
      if(frameCount &lt; 900) {
        size += 0.00007;
      }
      else if(frameCount &lt; 960) {
        size -= 0.00105;
      }
      else if(frameCount &lt; 1860) {
        size += 0.0001;
      }
      else if(frameCount &lt; 1920) {
        size -= 0.0015;
      }

      if(frameCount &lt; 60*3.5)
          radiusCircle += 0.003;
      else if(frameCount &lt; 60*8)
        radiusCircle -= 0.003;
      else if(frameCount &lt; 60*11)
        radiusCircle += 0.002;
      else if(frameCount &lt; 60*12)
        radiusCircle -= 0.003;        
      else if(frameCount &lt; 60*16)
        radiusCircle += 0.002;

      else if(frameCount &lt; 60*20)
        radiusCircle -= 0.003;
      else if(frameCount &lt; 60*24)
        radiusCircle += 0.002;
      else if(frameCount &lt; 60*27)
        radiusCircle -= 0.003;
      else if(frameCount &lt; 60*28)
        radiusCircle += 0.003;        
      else if(frameCount &lt; 60*32.5)
        radiusCircle -= 0.002;

      else if(frameCount &lt; 60*36)
        radiusCircle += 0.003;
      else if(frameCount &lt; 60*40)
        radiusCircle -= 0.003;
      else if(frameCount &lt; 60*42)
        radiusCircle += 0.003;
      else if(frameCount &lt; 60*44)
        radiusCircle -= 0.003;
      else if(frameCount &lt; 60*48)
        radiusCircle += 0.003;

      //Up &amp; Down------------------------------------------------------
      //0:46~------------------------------------------------------
      if(frameCount &gt; 2800 &amp;&amp; frameCount &lt; 2900){   // &amp;&amp; frameCount &lt; 3900
        if(size&gt;0)
          size -= 0.0005;
      }
      if(frameCount &gt; 2900 &amp;&amp; frameCount &lt; 3000)
        size += 0.0005;

      if (frameCount == 2900)
        v.setTime(radians(180*i));
      if (frameCount &gt; 2850 &amp;&amp; frameCount &lt; 3300) {
        if(v.frequency&gt;0.06)
          v.frequency -= 0.001;
      } 

      //Up &amp; Down_speedUp----------------------------------------------
      //0:58~0:70------------------------------------------------------
      else if (frameCount &gt; 3500 &amp;&amp; frameCount &lt; 4200) {
        v.frequency += 0.0005;
      }

      println(v.frequency);

      t.setSize(size);

      t.display();
    }
  }

  //spread---------------------------------------------------------
  //0:32~0:47------------------------------------------------------
  if(frameCount &gt; 1920){
    pushStyle();
    if(frameCount &lt; 4530)
      stroke(100*53/359, 100, increaseBri);      
    else {
      if(frameCount % 60 &lt; 30)
        stroke(100*184/359, 89, 100);
      else
        stroke(100*331/359, 100, 100);
    }
    for(int i=0; i&lt;triCircle2S.size(); i++){
      Tetrahedron tet = triCircle2S.get(i);
      SinWave x2 = sw1b.get(i);
      SinWave y2 = sw2b.get(i);
      TanWave tt2 = twb.get(i);
      CosWave v2 = cw1b.get(i);

      x2.setAmp(amplitude+increaseAmp);
      y2.setAmp(amplitude+increaseAmp);

      if(frameCount &lt; 1920+60)
        increaseAmp +=0.0005;
      else if(frameCount &lt; 1920+60*2)
        increaseAmp -=0.0005;
      else if(frameCount &lt; 1920+60*3)
        increaseAmp +=0.0005;
      else if(frameCount &lt; 1920+60*4)
        increaseAmp -=0.0005;
      else if(frameCount &lt; 1920+60*5)
        increaseAmp +=0.0005;
      else if(frameCount &lt; 1920+60*6)
        increaseAmp -=0.0005;
      else if(frameCount &lt; 1920+60*7)
        increaseAmp +=0.0005;
      else if(frameCount &lt; 1920+60*8)
        increaseAmp -=0.0005;
      else if(frameCount &lt; 1920+60*9)
        increaseAmp +=0.0005;
      else if(frameCount &lt; 1920+60*10)
        increaseAmp -=0.0005;
      else if(frameCount &lt; 1920+60*11)
        increaseAmp +=0.0005;
      else if(frameCount &lt; 1920+60*12)
        increaseAmp -=0.0005;
      else if(frameCount &lt; 1920+60*13)
        increaseAmp +=0.0005;
      else if(frameCount &lt; 1920+60*14)
        increaseAmp -=0.0005;

      if(frameCount &gt; 60*75.5 &amp;&amp; frameCount &lt; 60*77.1)   // &amp;&amp; frameCount &lt; 3900
        v2.amplitude -= 0.05;

      tet.update(x2.run()*100, v2.run()*(50+increaseAmp)+50, y2.run()*100, tt2.run()*0.05);
      tet.display();
    }
    popStyle();
    increaseBri += 0.8;
  }

  //another spread-------------------------------------------------
  //------------------------------------------------------
  if(frameCount &gt; 60*61){
    pushStyle();

    stroke((int)random(100)*100/359,100,100);

    for(int i=0; i&lt;triCircle3S.size(); i++){
      Tetrahedron ttt = triCircle3S.get(i);
      ttt.setSize(1);

      if(frameCount &lt; 60*70) {
        if(frameCount % 30 == 0){
          ttt.setSize(random(2));
          strokeWeight(random(1,5));
        }
      } else if(frameCount &lt; 60*77) {
        if(frameCount % 30 == 0){
          ttt.setSize(random(2,5));
          strokeWeight(random(3,7));
        }
      }

      SinWave x3 = sw1c.get(i);
      SinWave y3 = sw2c.get(i);
      TanWave tt3 = twc.get(i);
      CosWave v3 = cw1c.get(i);

      ttt.update(x3.run()*100, y3.run()*50, v3.run()*100, tt3.run()*0.05);
      ttt.display();
    }
    popStyle();
  }

  //auto create flying ones
  if(frameCount &gt; 60*16 &amp;&amp; frameCount &lt; 60*46){
    if(frameCount % (60*4) &lt; (60*1)) {
      if(frameCount % 10 ==0)
        newTri();
    }

  }

  if(frameCount &gt; 60*55 &amp;&amp; frameCount &lt; 60*60) {
    octaves += 0.1;
    falloff += 0.007;
  }

  if(triS.size()&gt;0){
    pushStyle();

    //flying around
    color triC = color(50, 70, increaseBri2);

    int direction = 1;

    //appear
    if(frameCount &gt; 60*10) {
      if(increaseBri2 &lt; 50) {
        increaseBri2 += 0.1*direction;

      }
    } else if (frameCount &gt; 60*77) {
      if(increaseBri2 &lt; 100) {
        increaseBri2 += 0.1*direction;

      }
    }

    for(int i=0; i&lt;triS.size(); i++){
      Tetrahedron t = triS.get(i);

      if(frameCount &lt; 60*61)
        t.setSize(size/2);
      else if(frameCount &lt; 60*70) {
        if(frameCount % 30 == 15){
          t.setSize(random(2));
          strokeWeight(random(1,5));
        }
      } else if(frameCount &lt; 60*77) {
        if(frameCount % 30 == 15){
          t.setSize(random(2,5));
          strokeWeight(random(3,7));
        }
        triC = color(random(1,100), 70, increaseBri2);

      } else if(frameCount &lt; 60*86) {
        t.setSize(random(2));
        triC = color(random(1,100), 70, increaseBri2);
      } else {
        t.setSize(random(100,500));
        triC = color(random(1,100), 70, 100);
      }

      t.setAngle(radians(i*10));

      if(i%2 == 0)
        t.update(t.x+posX, t.y+posY, t.z+(noise(time)*posZ), spin);
      else
        t.update(t.x+posX2, t.y+posY2, t.z+(noise(time)*posZ2), spin);

      t.display( triC );      
    }    
    popStyle();
  }
}

void newTri(){

  Tetrahedron t = new Tetrahedron();
  triS.add(t);
}

void mousePressed(){

  newTri();
}

void keyPressed() {

  switch(keyCode) {
  case UP:
    octaves++;
    break;
  case DOWN:
    octaves--;
    break;
  case RIGHT:
    falloff+=.1;
    break;
  case LEFT:
    falloff-=.1;
    break;
  }

  octaves = constrain(octaves, 0, 25);
  falloff = constrain(falloff, 0.0, 1.1);
}</pre>
<pre class="brush: java; gutter: true">class Tetrahedron {

  PShape t;
  PShape t1, t2, t3, t4;

  float x, y, z;
  float scale = 5;
  float angleY;

  color c;

  Tetrahedron() {
    //c = color(0,0,100);

    t = createShape(GROUP);

    t1 = createShape();
    t1.beginShape();
    t1.stroke(c);
    t1.vertex(-3, 0, 0);
    t1.vertex(3, 0, 0);
    t1.vertex(0, 0, -4);
    t1.endShape(CLOSE);

    t2 = createShape();
    t2.beginShape();
    t2.stroke(c);
    t2.vertex(-3, 0, 0);
    t2.vertex(0, 4, -1.7);
    t2.vertex(3, 0, 0);
    t2.endShape(CLOSE);

    t3 = createShape();
    t3.beginShape();
    t3.stroke(c);
    t3.vertex(3, 0, 0);
    t3.vertex(0, 4, -1.7);
    t3.vertex(0, 0, -4);
    t3.endShape(CLOSE);

    t4 = createShape();
    t4.beginShape();
    t4.stroke(c);
    t4.vertex(-3, 0, 0);
    t4.vertex(0, 0, -4);
    t4.vertex(0, 4, -1.7);
    t4.endShape(CLOSE);

    t.addChild(t1);
    t.addChild(t2);
    t.addChild(t3);
    t.addChild(t4);

    x = random(-200, 200);
    y = random(-200, 200);
    z = random(-200,200);

    t.disableStyle();
    t1.disableStyle();
    t2.disableStyle();
    t3.disableStyle();
    t4.disableStyle();
  }

  Tetrahedron(color _c) {
    c = _c;

    t = createShape(GROUP);

    t1 = createShape();
    t1.beginShape();
    t1.stroke(c);
    t1.vertex(-3, 0, 0);
    t1.vertex(3, 0, 0);
    t1.vertex(0, 0, -4);
    t1.endShape(CLOSE);

    t2 = createShape();
    t2.beginShape();
    t2.stroke(c);
    t2.vertex(-3, 0, 0);
    t2.vertex(0, 4, -1.7);
    t2.vertex(3, 0, 0);
    t2.endShape(CLOSE);

    t3 = createShape();
    t3.beginShape();
    t3.stroke(c);
    t3.vertex(3, 0, 0);
    t3.vertex(0, 4, -1.7);
    t3.vertex(0, 0, -4);
    t3.endShape(CLOSE);

    t4 = createShape();
    t4.beginShape();
    t4.stroke(c);
    t4.vertex(-3, 0, 0);
    t4.vertex(0, 0, -4);
    t4.vertex(0, 4, -1.7);
    t4.endShape(CLOSE);

    t.addChild(t1);
    t.addChild(t2);
    t.addChild(t3);
    t.addChild(t4);

    x = random(-200, 200);
    y = random(-200, 200);
    z = random(-200,200);

  }

  void update(float _x, float _y, float _z) {
    x = _x;
    y = _y;
    z = _z;
  }

  void update(float _x, float _y, float _z, float _angleY) {
    x = _x;
    y = _y;
    z = _z;
    angleY = _angleY;
  }

  void update(float _x, float _y, float _z, color _c) {
    x = _x;
    y = _y;
    z = _z;
    c = _c;
  }

  void update(float _x, float _y, float _z, color _c, float _angleY) {
    x = _x;
    y = _y;
    z = _z;
    c = _c;
    angleY = _angleY;
  }

  void setZ(float _z) {
    z = _z;
  }

  void setAngle(float _angleY) {
    angleY = _angleY;
  }

  void setSize(float _scale) {
    scale = _scale;
  }

  void display() {
    pushMatrix();    

    translate(x, y, z);
    rotateY(angleY);
    rotateZ(angleY);
    scale(scale);

    shape(t);
    popMatrix();
  }

  void display(color _color) {
    pushMatrix();    
    pushStyle();

    fill(_color);
    noStroke();

    translate(x, y, z);
    rotateY(angleY);
    rotateZ(angleY);
    scale(scale);

    shape(t);

    popStyle();
    popMatrix();
  }
}

class Wave{

  float time, frequency, amplitude, offset;

  Wave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }

  float run(){
    time += frequency;
    return sin( time ) * amplitude + offset;
  }

  void setAmp(float _amp){
    amplitude = _amp;
  }

  void setTime(float _ti){
    time = _ti;
  }

}

class SinWave {
  float time, frequency, amplitude, offset;

  SinWave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }

  float run() {
    time += frequency;
    return sin( time ) * amplitude + offset;
  }

  void setAmp(float _amp){
    amplitude = _amp;
  }

  void setTime(float _ti){
    time = _ti;
  }
}

class CosWave{
  float time, frequency, amplitude, offset;

  CosWave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }

  float run() {
    time += frequency;
    return cos( time ) * amplitude + offset;
  }

  void setAmp(float _amp){
    amplitude = _amp;
  }

  void setTime(float _ti){
    time = _ti;
  }

}

class TanWave {
  float time, frequency, amplitude, offset;

  TanWave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }

  float run() {
    time += frequency;
    return tan( time ) * amplitude + offset;
  }

  void setAmp(float _amp){
    amplitude = _amp;
  }

  void setTime(float _ti){
    time = _ti;
  }

}</pre>
]]></content:encoded>
					
					<wfw:commentRss>/2014/03/22/timing-and-pacing/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Noise3D</title>
		<link>/2014/03/10/noise3d/</link>
					<comments>/2014/03/10/noise3d/#respond</comments>
		
		<dc:creator><![CDATA[jhclaura]]></dc:creator>
		<pubDate>Mon, 10 Mar 2014 21:25:50 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Coding for Emotional Impact]]></category>
		<category><![CDATA[Spring 2014]]></category>
		<category><![CDATA[3D]]></category>
		<category><![CDATA[abstract]]></category>
		<category><![CDATA[cos]]></category>
		<category><![CDATA[noise]]></category>
		<category><![CDATA[processing]]></category>
		<category><![CDATA[sin]]></category>
		<category><![CDATA[tan]]></category>
		<category><![CDATA[tetrahedron]]></category>
		<guid isPermaLink="false">http://www.jhclaura.com/?p=1335</guid>

					<description><![CDATA[Processing first 3D attempt, using sin, cos, tan and noiseDetail(octaves, fallOff) to control the movement and spinning. No physical interaction, but just single objects follow their individual pathes. Codes float spin = 0.0; SinWave sinW1; SinWave sinW2; //time=0 CosWave cosW1; CosWave cosW2; //time=0; TanWave tanW1; TanWave tanW2; //time=0; float frequency = 0.01; float time1 = [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><iframe loading="lazy" src="//player.vimeo.com/video/88677041?byline=0&amp;color=c9ff23" height="637" width="800" allowfullscreen="" frameborder="0"></iframe></p>
<p>Processing first 3D attempt, using sin, cos, tan and noiseDetail(octaves, fallOff) to control the movement and spinning. No physical interaction, but just single objects follow their individual pathes.</p>
<p><span style="font-family: 'Andale Mono', Times; font-size: medium;"><em><strong>Codes</strong></em></span></p>
<p><span id="more-1335"></span></p>
<pre class="brush: java; gutter: true">float spin = 0.0;

SinWave sinW1;
SinWave sinW2;  //time=0
CosWave cosW1;
CosWave cosW2;  //time=0;
TanWave tanW1;
TanWave tanW2;  //time=0;

float frequency = 0.01;
float time1 = PI/2;
float time2 = 0;
float amplitude = 10;
float offset = 0;

float ang;
float posX;
float posY;
float posZ;

float posX2;
float posY2;
float posZ2;

ArrayList&lt;Tetrahedron&gt; triS;

float noiseVal;
float noiseScale=0.02;

int octaves;
float falloff;
float time;

//Camera
float xmag, ymag = 0;
float newXmag, newYmag = 0; 
float averagePosX = 0;

void setup() {
  noCursor();

  size(1000, 800, P3D);
  sinW1 = new SinWave(time1, frequency, amplitude, offset);
  sinW2 = new SinWave(time2, frequency, amplitude, offset);
  cosW1 = new CosWave(time1, frequency, amplitude, offset);
  cosW2 = new CosWave(time2, frequency, amplitude, offset);
  tanW1 = new TanWave(time1, frequency, amplitude, offset);
  tanW2 = new TanWave(time2, frequency, amplitude, offset);

  triS = new ArrayList&lt;Tetrahedron&gt;();
}

void draw() {
  background(255/23);
  //lights();
  noFill();
  stroke(255);
  strokeWeight(3);
//
  rotateX(-PI/2);
  noiseDetail(octaves, falloff);

//  camera(width/2.0, height/2.0, (height/2.0)/tan(PI*30.0 / 180.0), 
//         width/2.0, height/2.0, 0, 
//         0, 1, 0);

  posX = sinW1.run();
  posY = cosW2.run();
  posZ = cosW1.run();

  posX2 = cosW1.run();
  posY2 = sinW2.run();
  posZ2 = cosW2.run();

  spin = 0.05*tanW1.run();

  if(triS.size()&gt;0){
    //averagePosX = 0;
    for(int i=0; i&lt;triS.size(); i++){
      Tetrahedron t = triS.get(i);

      if(i%2 == 0)
        t.update(t.x+posX, t.y+posY, t.z+(noise(time)*posZ), spin);
      else
        t.update(t.x+posX2, t.y+posY2, t.z+(noise(time)*posZ2), spin);

      t.display();

    }
  }

  // show frame rate
  pushMatrix();
  pushStyle();
  fill(255);
  textSize(13);
  rotateX(PI/2);
  text(int(frameRate), 30, 30);
  text(&quot;mouseClick to generate tetrahedrons&quot;, 30, 50);
  text(&quot;NOISE: up to increase Octaves, right to increase FallOff&quot;, 30, 70);
  popStyle();
  popMatrix();

}

void mousePressed(){

  newTri();

}

void newTri(){

  Tetrahedron t = new Tetrahedron();
  triS.add(t);

}

void keyPressed() {

  switch(keyCode) {
  case UP:
    octaves++;
    break;
  case DOWN:
    octaves--;
    break;
  case RIGHT:
    falloff+=.1;
    break;
  case LEFT:
    falloff-=.1;
    break;
  }

  octaves = constrain(octaves, 1, 25);
  falloff = constrain(falloff, 0.01, 1.05);

  println(&quot;OCTAVES: &quot; + octaves + &quot;ttFALLOFF: &quot; + falloff);
}

class Tetrahedron {

  PShape t;
  PShape t1, t2, t3, t4;

  float x, y, z;
  float scale=5;
  float angleY;

  Tetrahedron() {
    t = createShape(GROUP);

    t1 = createShape();
    t1.beginShape();
    t1.vertex(-3, 0, 0);
    t1.vertex(3, 0, 0);
    t1.vertex(0, 0, -4);
    t1.endShape(CLOSE);

    t2 = createShape();
    t2.beginShape();
    t2.vertex(-3, 0, 0);
    t2.vertex(0, 4, -1.7);
    t2.vertex(3, 0, 0);
    t2.endShape(CLOSE);

    t3 = createShape();
    t3.beginShape();
    t3.vertex(3, 0, 0);
    t3.vertex(0, 4, -1.7);
    t3.vertex(0, 0, -4);
    t3.endShape(CLOSE);

    t4 = createShape();
    t4.beginShape();
    t4.vertex(-3, 0, 0);
    t4.vertex(0, 0, -4);
    t4.vertex(0, 4, -1.7);
    t4.endShape(CLOSE);

    t.addChild(t1);
    t.addChild(t2);
    t.addChild(t3);
    t.addChild(t4);

    x = random(width/2-200, width/2+200);
    y = random(height/2-200, height/2+200);
    z = random(-200,200);
  }

  void update(float _x, float _y, float _z) {
    x = _x;
    y = _y;
    z = _z;
  }

  void update(float _x, float _y, float _z, float _angleY) {
    x = _x;
    y = _y;
    z = _z;
    angleY = _angleY;
  }

  void setZ(float _z) {
    z = _z;
  }

  void setAngle(float _angleY) {
    angleY = _angleY;
  }

  void display() {
    pushMatrix();

    translate(x, y, z);
    rotateY(angleY);
    scale(scale);

    shape(t);
    popMatrix();
  }
}

class Wave{

  float time, frequency, amplitude, offset;

  Wave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }

  float run(){
    time += frequency;
    return sin( time ) * amplitude + offset;
  }

}

class SinWave {
  float time, frequency, amplitude, offset;

  SinWave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }

  float run() {
    time += frequency;
    return sin( time ) * amplitude + offset;
  }

}

class CosWave{
  float time, frequency, amplitude, offset;

  CosWave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }

  float run() {
    time += frequency;
    return cos( time ) * amplitude + offset;
  }

}

class TanWave {
  float time, frequency, amplitude, offset;

  TanWave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }

  float run() {
    time += frequency;
    return tan( time ) * amplitude + offset;
  }

}</pre>
]]></content:encoded>
					
					<wfw:commentRss>/2014/03/10/noise3d/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Face and Spider_60 sec. animation_{stages * 3}</title>
		<link>/2014/03/03/face-and-spider_60-sec-animation_stages-3/</link>
					<comments>/2014/03/03/face-and-spider_60-sec-animation_stages-3/#respond</comments>
		
		<dc:creator><![CDATA[jhclaura]]></dc:creator>
		<pubDate>Mon, 03 Mar 2014 16:31:23 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Coding for Emotional Impact]]></category>
		<category><![CDATA[Spring 2014]]></category>
		<category><![CDATA[animation]]></category>
		<category><![CDATA[fantasy]]></category>
		<category><![CDATA[trigonometric]]></category>
		<category><![CDATA[video]]></category>
		<guid isPermaLink="false">http://www.jhclaura.com/?p=1168</guid>

					<description><![CDATA[Audio wave research time! Totally not what I planed to do. I ended up make a story about a face and a spider. And it&#8217;s a face I guess represents the dark side of human beings. Scared easily by the unknown, and psyched about seeing spider being bullied by boxes. 3 stages story. Codes are [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><del>Audio wave research time!</del></p>
<p>Totally not what I planed to do. I ended up make a story about a face and a spider. And it&#8217;s a face I guess represents the dark side of human beings. Scared easily by the unknown, and psyched about seeing spider being bullied by boxes.</p>
<p><iframe loading="lazy" src="//player.vimeo.com/video/88066021?byline=0&amp;color=c9ff23" height="497" width="500" allowfullscreen="" frameborder="0"></iframe></p>
<p>3 stages story. Codes are gross and messy because I stayed up all night and was unconscious most of the time, and it can&#8217;t be played in Openprocessing I don&#8217;t know why&#8230; But. I kind of like the result even though it&#8217;s rough as hell, and I plan to make a v.2 of this.  Soon.</p>
<p><em><span style="font-family: 'Andale Mono', Times; font-size: medium;"><strong>Codes</strong></span></em></p>
<p><span id="more-1168"></span></p>
<pre class="brush: java; gutter: true">
sinWave w1;
cosWave w2;

// always positive
sinWave w3;
cosWave w4;

// time starts from 0
sinWave w5;
cosWave w6;

tanWave t1;
tanWave t2;

sawWave s1;
sawWave s2;

ArrayList&lt;Circle&gt; facePoints;

float frequency = 0.05;
float frequencyL = 0.1;
float time = PI/2;
float timeO = 0;
float amplitude = 10;
float offset = 0;
float offsetP = 5;

int directionX = 1;
int directionY = 1;

int timeSec;

void setup() {
  size(700,700);
  smooth();
  
  w1 = new sinWave(time, frequency, amplitude, offset);
  w2 = new cosWave(time, frequency, amplitude, offset);
  
  w3 = new sinWave(time, frequencyL, amplitude, offsetP);
  w4 = new cosWave(time, frequencyL, amplitude, offsetP);

  w5 = new sinWave(timeO, frequency, amplitude, offset);
  w6 = new cosWave(timeO, frequency, amplitude, offset);
  
  t1 = new tanWave(time, frequencyL, amplitude, offset);
  t2 = new tanWave(timeO, frequencyL, amplitude, offset);
  
  s1 = new sawWave(time, frequencyL, amplitude, offsetP);
  s2 = new sawWave(timeO, frequencyL, amplitude, offsetP);
  
  facePoints = new ArrayList&lt;Circle&gt;();



  mouthHeight = height/7;
  

  // spider
  for (int i=0; i&lt;50; i++) {
    float x = random(width/2-10, width/2+10);
    float y = random(height/2-10, height/2+10);
    facePoints.add(new Circle(x, y, 1));
  }  
}

float w1v, w2v, w3v, w4v, w5v, w6v, t1v, t2v, s1v, s2v;

void draw() {
  background(0);
  
  w1v = w1.run();
  w2v = w2.run();
  w3v = w3.run();
  w4v = w4.run();
  w5v = w5.run();
  w6v = w6.run();
  t1v = t1.run();
  t2v = t2.run();
  s1v = s1.run();
  s2v = s2.run();
  
  // second  
  timeSec = int(frameCount/60);

  stageOne();
  rightEyeScale = (abs(w2v)+1)*5;
  leftEyeScale = abs(w1v)*3;
  
  // show frame rate
  fill(255);
  text(int(frameRate), 20, 20);
  text(timeSec, width-50, 20);
  
  if (timeSec &gt;= 20)
    stageTwo();

}

float leftEyeChange = 0;
float leftEyeScale;
float rightEyeChange = 0;
float rightEyeScale;
float mouthHeight;
float mouthWeight = 0;

void stageOne() {
  noStroke();
  pushMatrix();
  translate(width/2, height/2);
  
  if (timeSec&gt;10 &amp;&amp; timeSec&lt;21) {
    leftEyeChange = lerp(leftEyeChange, w4v*5, 0.1);
    
    mouthHeight = lerp(height/7, height/4, 0.1);
    rightEyeChange = lerp(rightEyeChange, PI, 1);
    rightEyeScale = lerp(rightEyeScale, (abs(w2v)+1)*8, 1);
    leftEyeScale = lerp(leftEyeScale, abs(w1v)*6, 1);
    mouthWeight = lerp(0, 100, 0.5);
  }
  
  
  if (timeSec&gt;21 &amp;&amp; timeSec&lt;35) {
    leftEyeChange = random(w2v*5);
    
    mouthHeight = random(-10,10);
    rightEyeChange = lerp(PI, -PI, 1);
    rightEyeScale = lerp((abs(w2v)+1)*8, (abs(w2v)+1)*4, 1);
    leftEyeScale = lerp(abs(w1v)*6, abs(w1v)*3, 1);
    mouthWeight = lerp(100, 500, 1);
  }
  
  if (timeSec&gt;35 &amp;&amp; timeSec&lt;40) {
    mouthHeight = lerp(mouthHeight, height/7, 0.1);
    mouthWeight = lerp(500, 50, 0.1);
  }
  
  if (timeSec&gt;40 &amp;&amp; timeSec&lt;50) {
    leftEyeChange = lerp(0, w4v*5, 0.1);
    
    mouthHeight = lerp(height/7, height/3, 0.5);
    rightEyeChange = lerp(0, PI, 1);
    rightEyeScale = lerp((abs(w2v)+1)*4, (abs(w2v)+1)*8, 0.5);
    leftEyeScale = lerp(abs(w1v)*3, abs(w1v)*6, 0.5);
    mouthWeight = lerp(mouthWeight, 100, 0.5);
  }
  
    if (timeSec&gt;50) {
    leftEyeChange = lerp(w4v*5, w4v*7, 0.5);
    
    mouthHeight = lerp(height/3, height/2, 0.5);
//    rightEyeChange = lerp(PI, PI/2*3, 1);
    rightEyeScale = lerp((abs(w2v)+1)*8, (abs(w2v)+1)*12, 0.5);
    leftEyeScale = lerp(abs(w1v)*6, abs(w1v)*10, 0.5);
    mouthWeight = lerp(mouthWeight, 150, 0.1);
  }
  
  // mouth
  fill(255,18,145);
  triangle(w3v*3+rightEyeChange+mouthWeight, w1v+height/8, 
           -w3v*3+rightEyeChange-mouthWeight, w2v+height/8, 
           w4v+rightEyeChange, w4v+mouthHeight);

  
  // nose
  fill(255);
  ellipse(w1v, w2v+leftEyeChange, w1v, w1v);

  
  // left eye
  fill(0,255,255);
  rectMode(CENTER);
  rect(width/4+leftEyeChange, 0, leftEyeScale, leftEyeScale);
  
  
  // eyebrows
  fill(150);
  rect(width/4-leftEyeChange, -(height/4+w6v)+rightEyeChange*6, w3v*4, w4v/2);
  rect(-width/4+leftEyeChange, -(height/4+w6v)+leftEyeChange*5, w4v*4, w3v/2);
  
  
  // right eye
  fill(211,255,70);
  arc(-width/4+leftEyeChange/2, 0, rightEyeScale, rightEyeScale, 
      PI/4, w2v-rightEyeChange, PIE);
//  if (timeSec&gt;10) {
//    leftEyeChange = lerp(0, w2v*5, 0.5);
//    rightEyeChange = lerp(0, PI, 1);
//  }
  
  popMatrix();
  
  if (timeSec &gt;= 20)
    stageTwo();
}



float strokeW = 0.01;

// 20&quot; spider shows up, 30&quot; p disgusts at spider
void stageTwo() {
  
  // golden spider
  if (strokeW&lt;0.3)
    strokeW += 0.001;
    
  strokeWeight(strokeW);
  stroke(255,255,0);
  noFill();
  beginShape();
  
  for(int i=0; i&lt;facePoints.size(); i++) {
    //fill((int)random(240,250), (int)random(245,255), (int)random(0,40), 50);
    vertex(facePoints.get(i).loc.x, facePoints.get(i).loc.y);
    
    if (i%3 == 0) {
      facePoints.get(i).update(w1v, w2v);
    } else if (i%3 == 1) {
      facePoints.get(i).update(w3v, w4v);
    } else {
      facePoints.get(i).update(w5v, w6v);
    }
    
    facePoints.get(i).detectEdge(0, width, 0, height);
    facePoints.get(i).detectEdge(sV, sV);
  }
  endShape();
  
  
  if (timeSec &gt;= 35)
    stageThree();
}








float sV, sV2, sV3;

// 45&quot; bully spider HIGH -&gt; end
void stageThree() {
  // bad_rect
  strokeWeight(1);
  stroke(96,255,18);
  noFill();
  rectMode(CORNER);
  sV = w1.run()*50;
  sV2 = t1.run()*50;
  sV3 = w6.run()*50;
  rect(0, 0, sV, sV);
  rect(0, 0, sV+5, sV+5);
  
  if (timeSec &gt;= 40) {
    rectMode(CORNERS);
    rect(width, height, width-sV/8, height-sV/8);
  }
  
  if (timeSec &gt;= 40) {
    rectMode(CORNERS);
    rect(width, height, width-sV, height-sV);
  }
  
  if (timeSec &gt;= 45) {
    rect(width, 0, width-sV3, sV3);
  }
  
  if (timeSec &gt;= 50) {
    rect(0, height, sV2/5, height-sV2/7);
  }
}


class Circle {
  PVector loc;
  float radius;
  int change;


  Circle(float x, float y, float r) {
    loc = new PVector(x, y);
    radius = r;
    change = 1;
  }

  void display() {
    noStroke();
    fill(200);
    ellipse(loc.x, loc.y, radius, radius);
  }

  void update(float _x, float _y) {
    loc.x += _x * change;
    loc.y += _y * change;
  }
  
  void detectEdge(float x1, float x2, float y1, float y2) {

    if (loc.y &gt;= y2 || loc.y &lt; y1 || loc.x &gt;= x2 || loc.x &lt; x1)
      change *= -1;
  }
  
  void detectEdge(float x1, float y1) {

    if (loc.y &lt; y1 &amp;&amp; loc.x &lt; x1){
      loc.y = y1+5;
      loc.x = x1+5;
      change *= -1;
    }
  }
}



class Wave{
  
  float time, frequency, amplitude, offset;

  Wave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }
  
  float run(){
    time += frequency;
    return sin( time ) * amplitude + offset;
  }

}

class sinWave extends Wave {
  sinWave(float time, float frequency, float amplitude, float offset) {
    super(time, frequency, amplitude, offset);
  }
  
  float run() {
    time += frequency;
    return sin( time ) * amplitude + offset;
  }
  
}

class cosWave extends Wave {
  cosWave(float time, float frequency, float amplitude, float offset) {
    super(time, frequency, amplitude, offset);
  }
  
  float run() {
    time += frequency;
    return cos( time ) * amplitude + offset;
  }
  
}

class tanWave extends Wave {
  tanWave(float time, float frequency, float amplitude, float offset) {
    super(time, frequency, amplitude, offset);
  }
  
  float run() {
    time += frequency;
    return tan( time ) * amplitude + offset;
  }
  
}


class sawWave extends Wave {
  float m;
  
  sawWave(float time, float frequency, float amplitude, float offset) {
    super(time, frequency, amplitude, offset);
    
    m = (amplitude+offset)/TWO_PI;
  }
  
  float run() {
    time += frequency;
    return ( time%TWO_PI) * m;
  }
  
}</pre>
]]></content:encoded>
					
					<wfw:commentRss>/2014/03/03/face-and-spider_60-sec-animation_stages-3/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>tweaking mini_arc of Mimi</title>
		<link>/2014/02/23/tweaking-mini_arc-of-mimi/</link>
					<comments>/2014/02/23/tweaking-mini_arc-of-mimi/#respond</comments>
		
		<dc:creator><![CDATA[jhclaura]]></dc:creator>
		<pubDate>Mon, 24 Feb 2014 04:25:16 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Coding for Emotional Impact]]></category>
		<category><![CDATA[Spring 2014]]></category>
		<category><![CDATA[processing]]></category>
		<guid isPermaLink="false">http://www.jhclaura.com/?p=1130</guid>

					<description><![CDATA[Tweaking Mimi&#8217;s codes(go to youtube page to link to the amazing original codes of Mimi)! &#8211;&#62; the image of cat makes me laugh and realize the relationship of it with curve above better. &#160; &#8211;&#62; Feeling calm and a little be enchanted, just staring it to finish the pattern you expect in mind. &#160; &#8211;&#62; [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Tweaking Mimi&#8217;s codes(go to youtube page to link to the amazing original codes of Mimi)!</p>
<p><iframe loading="lazy" src="//www.youtube.com/embed/GY45TG3tJ-s?rel=0" height="360" width="640" allowfullscreen="" frameborder="0"></iframe></p>
<p>&#8211;&gt; the image of cat makes me laugh and realize the relationship of it with curve above better.</p>
<p>&nbsp;</p>
<p><iframe loading="lazy" src="//www.youtube.com/embed/wXjUHDy5EVc?rel=0" height="480" width="640" allowfullscreen="" frameborder="0"></iframe></p>
<p>&#8211;&gt; Feeling calm and a little be enchanted, just staring it to finish the pattern you expect in mind.</p>
<p>&nbsp;</p>
<p><iframe loading="lazy" src="//www.youtube.com/embed/LPcusjZ9nUA?rel=0" height="360" width="640" allowfullscreen="" frameborder="0"></iframe></p>
<p>&#8211;&gt; the change of speed, size, and color makes this feeling-soft-at-the-first-glance video more lively.</p>
<p>&nbsp;</p>
<p>And I chose to watch the Cat footage for 10s, 30s, 2 minutes, 5 minutes, and 10 minutes&#8230;.. what do I feel? <strong>NAUSEOUS</strong>. Apparently. It starts as interesting and fun, but after long time staring it, it became boring and made me dizzy.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2014/02/23/tweaking-mini_arc-of-mimi/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>physical aspects {Tranquil_v2}</title>
		<link>/2014/02/16/physical-aspects-tranquil_v2/</link>
					<comments>/2014/02/16/physical-aspects-tranquil_v2/#respond</comments>
		
		<dc:creator><![CDATA[jhclaura]]></dc:creator>
		<pubDate>Mon, 17 Feb 2014 02:44:34 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Coding for Emotional Impact]]></category>
		<category><![CDATA[Spring 2014]]></category>
		<category><![CDATA[cutie]]></category>
		<category><![CDATA[fantasy]]></category>
		<category><![CDATA[feedback]]></category>
		<category><![CDATA[peace]]></category>
		<guid isPermaLink="false">http://www.jhclaura.com/?p=1097</guid>

					<description><![CDATA[Based on the physical characteristics assigned by Neva: Scale: Immersive versus Distant distant Density: Heavy versus Light light, in order, orientation like lotus Rigidity / Elasticity: Hard versus Soft freely, floating, soft Energy-Level: Exciting versus Calming calming Number: One versus Crowd only one or many but with a lot of space, freely floating like stars I [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Based on the physical characteristics assigned by Neva:</p>
<ul>
<li>Scale: Immersive versus Distant
<ul>
<li>distant</li>
</ul>
</li>
<li>Density: Heavy versus Light
<ul>
<li>light, in order, orientation like lotus</li>
</ul>
</li>
<li>Rigidity / Elasticity: Hard versus Soft
<ul>
<li>freely, floating, soft</li>
</ul>
</li>
<li>Energy-Level: Exciting versus Calming
<ul>
<li>calming</li>
</ul>
</li>
<li>Number: One versus Crowd
<ul>
<li>only one</li>
<li>or many but with a lot of space, freely floating like stars</li>
</ul>
</li>
</ul>
<p>I adjust my {Tranquil_v1} from this:</p>
<p><iframe loading="lazy" src="http://www.openprocessing.org/sketch/132760/embed/?width=500&amp;height=500&amp;border=true" height="580" width="528" frameborder="0" scrolling="no"></iframe></p>
<p>to this(<span style="color: #11eed7;"><strong>click</strong><span style="color: #000000;"> to switch the</span><strong> background mode</strong><span style="color: #000000;"><span style="color: #ff6600;">(black, grey dots, white)</span>, it&#8217;d run faster if you enter the post to see)</span></span>:</p>
<p><iframe loading="lazy" src="http://www.openprocessing.org/sketch/134343/embed/?width=1250&amp;height=800&amp;border=true" height="880" width="1278" frameborder="0" scrolling="no"></iframe></p>
<p>&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>/2014/02/16/physical-aspects-tranquil_v2/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>emotion visualization {Tranquil}</title>
		<link>/2014/02/09/emotion-visualization-tranquil/</link>
					<comments>/2014/02/09/emotion-visualization-tranquil/#respond</comments>
		
		<dc:creator><![CDATA[jhclaura]]></dc:creator>
		<pubDate>Sun, 09 Feb 2014 15:50:55 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Coding for Emotional Impact]]></category>
		<category><![CDATA[Spring 2014]]></category>
		<category><![CDATA[mood]]></category>
		<category><![CDATA[processing]]></category>
		<category><![CDATA[story]]></category>
		<guid isPermaLink="false">http://www.jhclaura.com/?p=971</guid>

					<description><![CDATA[Before I start, let me document one thing first&#8230; I FORGOT the format of Processing. Proof as below. And also, I found a music video programming in Openframeworks. Pure Astonishing. &#160; OK. Let&#8217;s begin. {Tranquil} For creating 3 studies of the emotion with ratios of space, rations of color, and ratios of time, I got Tranquil from [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Before I start, let me document one thing first&#8230; <strong>I FORGOT the format of Processing.</strong> Proof as below.</p>
<p><img loading="lazy" class="alignnone  wp-image-974" alt="Screen Shot 2014-02-07 at 7.41.33 PM" src="http://www.jhclaura.com/wp-content/uploads/2014/02/Screen-Shot-2014-02-07-at-7.41.33-PM.png" width="280" height="335" /></p>
<p>And also, I found a music video programming in Openframeworks. Pure Astonishing.</p>
<p><iframe loading="lazy" src="//player.vimeo.com/video/13247004?title=0&amp;byline=0&amp;portrait=0&amp;color=ffffff" height="450" width="800" allowfullscreen="" frameborder="0"></iframe></p>
<p>&nbsp;</p>
<p>OK. Let&#8217;s begin.</p>
<h1>{Tranquil}</h1>
<p>For <em>creating 3 studies of the emotion with ratios of space, rations of color, and ratios of time</em>, I got <span style="color: #33cccc;">Tranquil</span> from Kate, and l first pictured the situation I&#8217;ll have this feeling in, and then tried to convey them through coding.</p>
<pre>&lt;em&gt;Situation&lt;/em&gt;: sparkling dust floating in dark, hair floating with wind, immerse in music in crowd environment, look into sky, unfocus eyesight, repeat pattern</pre>
<p><strong>Study 1</strong>: calm(look into sky, unfocus eyesight, <span style="text-decoration: underline;">repeat pattern</span>)</p>
<p><iframe loading="lazy" src="http://www.openprocessing.org/sketch/132760/embed/?width=500&amp;height=500&amp;border=true" height="580" width="528" frameborder="0" scrolling="no"></iframe></p>
<p><strong>Study 2</strong>: free from disturbance(<span style="text-decoration: underline;">immerse in music in crowd environment</span>)</p>
<p><iframe loading="lazy" src="http://www.openprocessing.org/sketch/132763/embed/?width=500&amp;height=500&amp;border=true" height="580" width="528" frameborder="0" scrolling="no"></iframe></p>
<p><strong>Study 3</strong>: free(<span style="text-decoration: underline;">sparkling dust floating in dark</span>, hair floating with wind)</p>
<p><iframe loading="lazy" src="http://www.openprocessing.org/sketch/132762/embed/?width=500&amp;height=500&amp;border=true" height="580" width="528" frameborder="0" scrolling="no"></iframe></p>
]]></content:encoded>
					
					<wfw:commentRss>/2014/02/09/emotion-visualization-tranquil/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>perform test &#038; 5 patterns of emotion</title>
		<link>/2014/01/29/5-patterns-of-emotion/</link>
					<comments>/2014/01/29/5-patterns-of-emotion/#respond</comments>
		
		<dc:creator><![CDATA[jhclaura]]></dc:creator>
		<pubDate>Thu, 30 Jan 2014 02:04:57 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Coding for Emotional Impact]]></category>
		<category><![CDATA[inspiration]]></category>
		<category><![CDATA[observation]]></category>
		<guid isPermaLink="false">http://www.jhclaura.com/?p=856</guid>

					<description><![CDATA[Group perform test w/ audiences! And below are my 5 patterns of emotion. The emotion accumulates through the weaving of three stories. At first, the emotion is unsure and blur. And gradually, the similarities of three stories appears, and the emotion goes higher and higher. In the end, huge amount of happiness burst out. The [&#8230;]]]></description>
										<content:encoded><![CDATA[<p>Group perform test w/ audiences!</p>
<p><iframe loading="lazy" src="//player.vimeo.com/video/85578785" height="437" width="800" allowfullscreen="" frameborder="0"></iframe></p>
<p>And below are my 5 patterns of emotion.</p>
<p><a href="http://vimeo.com/85578785"><iframe loading="lazy" style="font-size: 1em; color: #444444;" src="//player.vimeo.com/video/58150375?title=0&amp;byline=0&amp;portrait=0&amp;badge=0" height="450" width="800" allowfullscreen="" frameborder="0"></iframe></a></p>
<p>The emotion accumulates through the weaving of three stories. At first, the emotion is unsure and blur. And gradually, the similarities of three stories appears, and the emotion goes higher and higher. In the end, huge amount of happiness burst out. The pattern of emotion reaches pick. And the result makes the sweetness linger into the end.</p>
<p>&nbsp;</p>
<p><iframe loading="lazy" src="//player.vimeo.com/video/7354877" height="450" width="800" allowfullscreen="" frameborder="0"></iframe></p>
<p>For music, similar to the 1st piece, emotion starts low and then goes high. What&#8217;s special about this is its &#8220;swinging&#8221; feature. By swing low makes the high even higher. And the competitive pattern create the anticipation from audience and creates more sense of involvement.</p>
<p>&nbsp;</p>
<p><a href="http://brookandlyn.com/brookandlyn_weaving_palm_tree_frond_green.html"><img loading="lazy" class="alignnone" alt="" src="http://brookandlyn.com/img/brookandlyn_mimi_jung_weaving_9.jpg" width="454" height="611" /></a></p>
<p>I see the pattern of the weaving from up to down. Not only the lines, the different materials and textures bring and add another layer to the pattern. It&#8217;s like the extra details on the high and low points. Besides the pattern of wave, different genera.</p>
<p>&nbsp;</p>
<p><img loading="lazy" class="alignnone" alt="" src="http://www.minimegeology.com/shop/wpimages/Fault_photo.jpg" width="426" height="282" /></p>
<p>It&#8217;s an unusual pattern I&#8217;d love to challenge. Unlike the easy-following pattern, the abrupt fault shift the layers as whole, so although it&#8217;s easy to tell from looking at distance, it&#8217;s difficult to tell in close-up view. In the way to express, I&#8217;d imagine the &#8220;style&#8221; will change abruptly and unrelated at all. Altering without clues. And after that, gradually and gradually, viewers(or receivers, more broad) MIGHT realize the changing. Hopefully.</p>
<p>&nbsp;</p>
<p><img loading="lazy" class="alignnone" alt="" src="http://farm9.staticflickr.com/8007/7709326414_da7751afc0_o.jpg" width="810" height="539" /></p>
<p>It&#8217;s a raw meat pattern. Less linear, more circular. It&#8217;s like a linear pattern without the end. Ending is always the beginning. Love the variation of width of layers. Difference of width, curves, and colors can add up producing a rich experience. Not good for real performance definitely.</p>
]]></content:encoded>
					
					<wfw:commentRss>/2014/01/29/5-patterns-of-emotion/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
