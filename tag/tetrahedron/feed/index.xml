<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>tetrahedron &#8211; ITP Days</title>
	<atom:link href="/tag/tetrahedron/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>Very cool days</description>
	<lastBuildDate>Mon, 10 Mar 2014 21:25:50 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.1</generator>

<image>
	<url>/wp-content/uploads/2015/09/cropped-hat-32x32.jpg</url>
	<title>tetrahedron &#8211; ITP Days</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Noise3D</title>
		<link>/2014/03/10/noise3d/</link>
					<comments>/2014/03/10/noise3d/#respond</comments>
		
		<dc:creator><![CDATA[jhclaura]]></dc:creator>
		<pubDate>Mon, 10 Mar 2014 21:25:50 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Coding for Emotional Impact]]></category>
		<category><![CDATA[Spring 2014]]></category>
		<category><![CDATA[3D]]></category>
		<category><![CDATA[abstract]]></category>
		<category><![CDATA[cos]]></category>
		<category><![CDATA[noise]]></category>
		<category><![CDATA[processing]]></category>
		<category><![CDATA[sin]]></category>
		<category><![CDATA[tan]]></category>
		<category><![CDATA[tetrahedron]]></category>
		<guid isPermaLink="false">http://www.jhclaura.com/?p=1335</guid>

					<description><![CDATA[Processing first 3D attempt, using sin, cos, tan and noiseDetail(octaves, fallOff) to control the movement and spinning. No physical interaction, but just single objects follow their individual pathes. Codes float spin = 0.0; SinWave sinW1; SinWave sinW2; //time=0 CosWave cosW1; CosWave cosW2; //time=0; TanWave tanW1; TanWave tanW2; //time=0; float frequency = 0.01; float time1 = [&#8230;]]]></description>
										<content:encoded><![CDATA[<p><iframe loading="lazy" src="//player.vimeo.com/video/88677041?byline=0&amp;color=c9ff23" height="637" width="800" allowfullscreen="" frameborder="0"></iframe></p>
<p>Processing first 3D attempt, using sin, cos, tan and noiseDetail(octaves, fallOff) to control the movement and spinning. No physical interaction, but just single objects follow their individual pathes.</p>
<p><span style="font-family: 'Andale Mono', Times; font-size: medium;"><em><strong>Codes</strong></em></span></p>
<p><span id="more-1335"></span></p>
<pre class="brush: java; gutter: true">float spin = 0.0;

SinWave sinW1;
SinWave sinW2;  //time=0
CosWave cosW1;
CosWave cosW2;  //time=0;
TanWave tanW1;
TanWave tanW2;  //time=0;

float frequency = 0.01;
float time1 = PI/2;
float time2 = 0;
float amplitude = 10;
float offset = 0;

float ang;
float posX;
float posY;
float posZ;

float posX2;
float posY2;
float posZ2;

ArrayList&lt;Tetrahedron&gt; triS;

float noiseVal;
float noiseScale=0.02;

int octaves;
float falloff;
float time;

//Camera
float xmag, ymag = 0;
float newXmag, newYmag = 0; 
float averagePosX = 0;

void setup() {
  noCursor();

  size(1000, 800, P3D);
  sinW1 = new SinWave(time1, frequency, amplitude, offset);
  sinW2 = new SinWave(time2, frequency, amplitude, offset);
  cosW1 = new CosWave(time1, frequency, amplitude, offset);
  cosW2 = new CosWave(time2, frequency, amplitude, offset);
  tanW1 = new TanWave(time1, frequency, amplitude, offset);
  tanW2 = new TanWave(time2, frequency, amplitude, offset);

  triS = new ArrayList&lt;Tetrahedron&gt;();
}

void draw() {
  background(255/23);
  //lights();
  noFill();
  stroke(255);
  strokeWeight(3);
//
  rotateX(-PI/2);
  noiseDetail(octaves, falloff);

//  camera(width/2.0, height/2.0, (height/2.0)/tan(PI*30.0 / 180.0), 
//         width/2.0, height/2.0, 0, 
//         0, 1, 0);

  posX = sinW1.run();
  posY = cosW2.run();
  posZ = cosW1.run();

  posX2 = cosW1.run();
  posY2 = sinW2.run();
  posZ2 = cosW2.run();

  spin = 0.05*tanW1.run();

  if(triS.size()&gt;0){
    //averagePosX = 0;
    for(int i=0; i&lt;triS.size(); i++){
      Tetrahedron t = triS.get(i);

      if(i%2 == 0)
        t.update(t.x+posX, t.y+posY, t.z+(noise(time)*posZ), spin);
      else
        t.update(t.x+posX2, t.y+posY2, t.z+(noise(time)*posZ2), spin);

      t.display();

    }
  }

  // show frame rate
  pushMatrix();
  pushStyle();
  fill(255);
  textSize(13);
  rotateX(PI/2);
  text(int(frameRate), 30, 30);
  text(&quot;mouseClick to generate tetrahedrons&quot;, 30, 50);
  text(&quot;NOISE: up to increase Octaves, right to increase FallOff&quot;, 30, 70);
  popStyle();
  popMatrix();

}

void mousePressed(){

  newTri();

}

void newTri(){

  Tetrahedron t = new Tetrahedron();
  triS.add(t);

}

void keyPressed() {

  switch(keyCode) {
  case UP:
    octaves++;
    break;
  case DOWN:
    octaves--;
    break;
  case RIGHT:
    falloff+=.1;
    break;
  case LEFT:
    falloff-=.1;
    break;
  }

  octaves = constrain(octaves, 1, 25);
  falloff = constrain(falloff, 0.01, 1.05);

  println(&quot;OCTAVES: &quot; + octaves + &quot;ttFALLOFF: &quot; + falloff);
}

class Tetrahedron {

  PShape t;
  PShape t1, t2, t3, t4;

  float x, y, z;
  float scale=5;
  float angleY;

  Tetrahedron() {
    t = createShape(GROUP);

    t1 = createShape();
    t1.beginShape();
    t1.vertex(-3, 0, 0);
    t1.vertex(3, 0, 0);
    t1.vertex(0, 0, -4);
    t1.endShape(CLOSE);

    t2 = createShape();
    t2.beginShape();
    t2.vertex(-3, 0, 0);
    t2.vertex(0, 4, -1.7);
    t2.vertex(3, 0, 0);
    t2.endShape(CLOSE);

    t3 = createShape();
    t3.beginShape();
    t3.vertex(3, 0, 0);
    t3.vertex(0, 4, -1.7);
    t3.vertex(0, 0, -4);
    t3.endShape(CLOSE);

    t4 = createShape();
    t4.beginShape();
    t4.vertex(-3, 0, 0);
    t4.vertex(0, 0, -4);
    t4.vertex(0, 4, -1.7);
    t4.endShape(CLOSE);

    t.addChild(t1);
    t.addChild(t2);
    t.addChild(t3);
    t.addChild(t4);

    x = random(width/2-200, width/2+200);
    y = random(height/2-200, height/2+200);
    z = random(-200,200);
  }

  void update(float _x, float _y, float _z) {
    x = _x;
    y = _y;
    z = _z;
  }

  void update(float _x, float _y, float _z, float _angleY) {
    x = _x;
    y = _y;
    z = _z;
    angleY = _angleY;
  }

  void setZ(float _z) {
    z = _z;
  }

  void setAngle(float _angleY) {
    angleY = _angleY;
  }

  void display() {
    pushMatrix();

    translate(x, y, z);
    rotateY(angleY);
    scale(scale);

    shape(t);
    popMatrix();
  }
}

class Wave{

  float time, frequency, amplitude, offset;

  Wave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }

  float run(){
    time += frequency;
    return sin( time ) * amplitude + offset;
  }

}

class SinWave {
  float time, frequency, amplitude, offset;

  SinWave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }

  float run() {
    time += frequency;
    return sin( time ) * amplitude + offset;
  }

}

class CosWave{
  float time, frequency, amplitude, offset;

  CosWave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }

  float run() {
    time += frequency;
    return cos( time ) * amplitude + offset;
  }

}

class TanWave {
  float time, frequency, amplitude, offset;

  TanWave(float _time, float _frequency, float _amplitude, float _offset){
    time = _time;
    frequency = _frequency;
    amplitude = _amplitude;
    offset = _offset;
  }

  float run() {
    time += frequency;
    return tan( time ) * amplitude + offset;
  }

}</pre>
]]></content:encoded>
					
					<wfw:commentRss>/2014/03/10/noise3d/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
